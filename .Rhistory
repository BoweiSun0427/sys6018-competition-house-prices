norm <- ((x - min(x))/(max(x) - min(x)))
return (norm)
}
train_numeric_normal <- apply(train_numeric[,-1],2,normalize)
View(train_numeric_normal)
train_numeric[,-1]
train_numeric[,]
train_numeric[,-1]
train_numeric[,]
train_numeric[,-1]
train_numeric[,-1]
# Euclidean distance
edist <- data.frame(dist = eculidian_dist(train_numeric_normal, train_numeric), saleprice = train[,81])
eculidian_dist <- function(k,unk) {
distance <- rep(0, nrow(k))
for(i in 1:nrow(k))
distance[i] <- sqrt((k[,1][i] - unk[,1])^2 + (k[,2][i] - unk[,2])^2 +
(k[,3] - unk[,3])^2 + (k[,4][i] - unk[,4])^2 +
(k[,5][i] - unk[,5])^2)
return(distance)
}
# Euclidean distance
edist <- data.frame(dist = eculidian_dist(train_numeric_normal, train_numeric), saleprice = train[,81])
warnings
warnings()
##########################################KNN
#use only numeric cols
train_numeric <- select_if(train,is.numeric)
#nomalize
normalize <- function(x) {
norm <- ((x - min(x))/(max(x) - min(x)))
return (norm)
}
train_numeric_normal <- apply(train_numeric[,-1],2,normalize)
eculidian_dist <- function(k,unk) {
distance <- rep(0, nrow(k))
for(i in 1:nrow(k))
distance[i] <- sqrt((k[,1][i] - unk[,1])^2 + (k[,2][i] - unk[,2])^2 +
(k[,3] - unk[,3])^2 + (k[,4][i] - unk[,4])^2 +
(k[,5][i] - unk[,5])^2)
return(distance)
}
# Euclidean distance
edist <- data.frame(dist = eculidian_dist(train_numeric_normal, train_numeric), saleprice = train[,81])
print(edist)
View(train)
k <- floor(sqrt(nrow(train_numeric_normal)))
print(k)
# we will print first three distances as k =3
rank_edist[1:3,]
# we will print first three distances as k =38
rank_edist[1:38,]
#Rank the distances in ascending
rank_edist <- edist[order(edist$dist),]
# we will print first three distances as k =38
rank_edist[1:38,]
yhat <- mean(rank_edist[1:38,2])
print(yhat)
##########################################KNN
#use only numeric cols
train_numeric <- select_if(train,is.numeric)
train_numeric_normal
View(train_numeric_normal)
##########################################KNN
#use only numeric cols
train_numeric <- select_if(train,is.numeric)
#nomalize
normalize <- function(x) {
norm <- ((x - min(x))/(max(x) - min(x)))
return (norm)
}
train_numeric_normal <- apply(train_numeric[,1:33],2,normalize)
View(train_numeric_normal)
train_numeric_normal <- apply(train_numeric[,2:33],2,normalize)
View(train_numeric_normal)
##########################################KNN
#use only numeric cols
train_numeric <- select_if(train,is.numeric)
#nomalize
normalize <- function(x) {
norm <- ((x - min(x))/(max(x) - min(x)))
return (norm)
}
train_numeric[,2:33] <- apply(train_numeric[,2:33],2,normalize)
View(train_numeric)
eculidian_dist <- function(k,unk) {
distance <- rep(0, nrow(k))
for(i in 1:nrow(k))
distance[i] <- sqrt((k[,1][i] - unk[,1])^2 + (k[,2][i] - unk[,2])^2 +
(k[,3] - unk[,3])^2 + (k[,4][i] - unk[,4])^2 +
(k[,5][i] - unk[,5])^2)
return(distance)
}
test_numeric <- select_if(test,is.numeric)
View(test_numeric)
test_numeric['SalePrice'] <- NA
test_numeric['SalePrice'] <- NULL
View(test_numeric)
test_numeric[,2:33] <- apply(test_numeric[,2:33],2,normalize)
View(test_numeric)
View(train_numeric)
##
# function to calculate euclidean distance
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
x1 <- c(1,2,3,4,5)
x2 <- c(2,3,4,5,6)
eculidian_dist(x1,x2)
euc.dist(x1,x2)
edist <- data.frame(matrix(ncol = 2, nrow = 1459))
edist <- data.frame(matrix(ncol = 2, nrow = 1459))
train_numeric[1,]
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test)
edist[i] <- distance[i]
}
##
# function to calculate euclidean distance
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
edist <- data.frame(matrix(ncol = 2, nrow = 1459))
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test)
edist[i] <- distance[i]
}
##
# function to calculate euclidean distance
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
edist <- data.frame(matrix(ncol = 2, nrow = 1459))
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test)
edist[i] <- distance[i]
}
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test[j,])
edist[i] <- distance[i]
}
}
train_numeric['SalePrice'] <- NULL
train_numeric['SalePrice'] <- NULL
#nomalize
normalize <- function(x) {
norm <- ((x - min(x))/(max(x) - min(x)))
return (norm)
}
train_numeric[,2:33] <- apply(train_numeric[,2:33],2,normalize)
test_numeric[,2:33] <- apply(test_numeric[,2:33],2,normalize)
##
# function to calculate euclidean distance
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
edist <- data.frame(matrix(ncol = 2, nrow = 1459))
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test[j,])
edist[i] <- distance[i]
}
}
x1 <- c(1,2,3,4)
x2 <- c(2,3,4,5)
euc.dist(x1,x2)
##
# function to calculate euclidean distance
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
##
# function to calculate euclidean distance
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
x1 <- c(1,2,3,4)
x2 <- c(2,3,4,5)
euc.dist(x1,x2)
edist <- data.frame(matrix(ncol = 2, nrow = 1459*1459))
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test[j,])
edist[i] <- distance[i]
}
}
distance[1] <- euc.dist(train_numeric[1,],test[1,])
euc.dist(train_numeric[1,],test[1,])
euc.dist(train_numeric[1,],test[1,])
##
# function to calculate euclidean distance
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
x1 <- c(1,2,3,4)
x2 <- c(2,3,4,5)
euc.dist(x1,x2)
euc.dist(train_numeric[1,],test[1,])
euc.dist(train_numeric[1,],test_numeric[1,])
View(edist)
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i] <- distance[i]
}
edist_temp <- edist_temp[order(edist_temp$X1)]
}
distance <- data.frame(matrix(ncol = 1, nrow = 1459))
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i] <- distance[i]
}
edist_temp <- edist_temp[order(edist_temp$X1)]
}
edist_temp <- data.frame(matrix(ncol = 2, nrow = 1459))
eist <- data.frame(matrix(ncol = 2, nrow = 1459))
distance <- data.frame(matrix(ncol = 1, nrow = 1459))
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i] <- distance[i]
}
edist_temp <- edist_temp[order(edist_temp$X1)]
}
##########################################KNN
# calculate the number of K
k <- floor(sqrt(nrow(train_numeric)))
# calculate the number of K
k <- floor(sqrt(nrow(train_numeric)))
train$SalePrice
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i,1] <- distance[i]
edist_temp[i,2] <- train[i,81]
}
edist_temp <- edist_temp[order(edist_temp$X1)]
edist_temp <- edist_temp[1:38,]
}
1459*1459
View(edist_temp)
#
edist_temp <- data.frame(matrix(ncol = 2, nrow = 1459))
eist <- data.frame(matrix(ncol = 2, nrow = 1459))
distance <- data.frame(matrix(ncol = 1, nrow = 1459))
for (j in 1) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i,1] <- distance[i]
edist_temp[i,2] <- train[i,81]
}
edist_temp <- edist_temp[order(edist_temp$X1)]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp)
}
warnings()
distance_mean
View(edist_temp)
edist_temp <- edist_temp[order(edist_temp$X1)]
edist_temp <- edist_temp[order(edist_temp$X1),]
edist_temp
edist_temp <- edist_temp[1:38,]
edist_temp
distance_mean <- mean(edist_temp$X2)
distance_mean
#
edist_temp <- data.frame(matrix(ncol = 2, nrow = 1459))
eist <- data.frame(matrix(ncol = 2, nrow = 1459))
distance <- data.frame(matrix(ncol = 1, nrow = 1459))
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i,1] <- distance[i]
edist_temp[i,2] <- train[i,81]
}
edist_temp <- edist_temp[order(edist_temp$X1),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$X2)
eist[j,1] <- distance_mean
}
for (j in 1:10) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i,1] <- distance[i]
edist_temp[i,2] <- train[i,81]
}
edist_temp <- edist_temp[order(edist_temp$X1),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$X2)
eist[j,1] <- distance_mean
}
#
edist_temp <- data.frame(matrix(ncol = 2, nrow = 1459))
eist <- data.frame(matrix(ncol = 2, nrow = 1459))
distance <- data.frame(matrix(ncol = 1, nrow = 1459))
for (j in 1:10) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
edist_temp[i,1] <- distance[i]
edist_temp[i,2] <- train[i,81]
}
edist_temp <- edist_temp[order(edist_temp$X1),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$X2)
eist[j,1] <- distance_mean
}
distance <- c()
#
# edist_temp <- data.frame(matrix(ncol = 2, nrow = 1459))
eist <- c()
distance <- c()
for (j in 1:1459) {
for (i in 1:1459) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
# edist_temp[i,1] <- distance[i]
# edist_temp[i,2] <- train[i,81]
}
edist_temp <- data.frame(dist=distance, salePrice = train[,81])
edist_temp <- edist_temp[order(edist_temp$dist),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$salePrice)
eist[j] <- distance_mean
}
#
# edist_temp <- data.frame(matrix(ncol = 2, nrow = 1459))
eist <- c()
distance <- c()
for (j in 1:1459) {
for (i in 1:1460) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
# edist_temp[i,1] <- distance[i]
# edist_temp[i,2] <- train[i,81]
}
edist_temp <- data.frame(dist=distance, salePrice = train[,81])
edist_temp <- edist_temp[order(edist_temp$dist),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$salePrice)
eist[j] <- distance_mean
}
for (j in 1:2) {
for (i in 1:1460) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
# edist_temp[i,1] <- distance[i]
# edist_temp[i,2] <- train[i,81]
}
edist_temp <- data.frame(dist=distance, salePrice = train[,81])
edist_temp <- edist_temp[order(edist_temp$dist),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$salePrice)
eist[j] <- distance_mean
}
#
# edist_temp <- data.frame(matrix(ncol = 2, nrow = 1459))
eist <- c()
distance <- c()
for (j in 1:2) {
for (i in 1:1460) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
# edist_temp[i,1] <- distance[i]
# edist_temp[i,2] <- train[i,81]
}
edist_temp <- data.frame(dist=distance, salePrice = train[,81])
edist_temp <- edist_temp[order(edist_temp$dist),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$salePrice)
eist[j] <- distance_mean
}
eist
corr(train_numeric)
cor(train_numeric)
cor(train_numeric) >0.5
cor(train_numeric)[cor(train_numeric) >0.5]
#By using Cor(), here we decide to what X variables will be added to KNN model.
cor(train_numeric)
options("max.print" = 10000000)
#By using Cor(), here we decide to what X variables will be added to KNN model.
cor(train_numeric)
##########################################KNN
#use only numeric cols
train_numeric <- select_if(train,is.numeric)
#By using Cor(), here we decide to what X variables will be added to KNN model.
cor(train_numeric)
train_numeric[,2:33] <- apply(train_numeric[,2:33],2,normalize)
test_numeric[,2:33] <- apply(test_numeric[,2:33],2,normalize)
##########################################KNN
#use only numeric cols
train_numeric <- select_if(train,is.numeric)
test_numeric <- select_if(test,is.numeric)
#By using Cor(), here we decide to what X variables will be added to KNN model.
cor(train_numeric)
test_numeric['SalePrice'] <- NULL
train_numeric['SalePrice'] <- NULL
# calculate the number of K
k <- floor(sqrt(nrow(train_numeric)))
train_numeric[,2:33] <- apply(train_numeric[,2:33],2,normalize)
test_numeric[,2:33] <- apply(test_numeric[,2:33],2,normalize)
View(train_numeric)
train_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
test_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
test_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
test_numeric[,2:33] <- apply(test_numeric[,2:33],2,normalize)
test_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
options("max.print" = 10000000)
# Load Data ---------------------------------------------------------------
train <- read.csv("train.csv")
test <- read.csv("test.csv")
missing_value = data.frame(matrix(ncol = 2, nrow = 81))
names(missing_value) = c("colName","MissingValue")
#cleaning data - find columns with missing value
#conbine train and test data once and do the cleaning at once.
test['SalePrice'] <- 0
train_test <- rbind(train,test)
for (i in 1:81){
temp = as.data.frame(table(is.na(train_test[,i])))
missing_value[i,] <- temp[2,2]
missing_value[i,1] <- colnames(train_test[i])
}
missing_value <- filter(missing_value, missing_value$MissingValue != 'NA')
missing_value$colName
#recode missing values
#recode with most common
train_test$MSZoning[is.na(train_test$MSZoning)] <- names(which.max(table(train_test$MSZoning)))
train_test$Utilities[is.na(train_test$Utilities)] <- names(which.max(table(train_test$Utilities)))
train_test$Exterior1st[is.na(train_test$Exterior1st)] <- names(which.max(table(train_test$Exterior1st)))
train_test$Exterior2nd[is.na(train_test$Exterior2nd)] <- names(which.max(table(train_test$Exterior2nd)))
train_test$MasVnrType[is.na(train_test$MasVnrType)] <- names(which.max(table(train_test$MasVnrType)))
train_test$Electrical[is.na(train_test$Electrical)] <- names(which.max(table(train_test$Electrical)))
train_test$BsmtFullBath[is.na(train_test$BsmtFullBath)] <- names(which.max(table(train_test$BsmtFullBath)))
train_test$BsmtHalfBath[is.na(train_test$BsmtHalfBath)] <- names(which.max(table(train_test$BsmtHalfBath)))
train_test$KitchenQual[is.na(train_test$KitchenQual)] <- names(which.max(table(train_test$KitchenQual)))
train_test$Functional[is.na(train_test$Functional)] <- names(which.max(table(train_test$Functional)))
train_test$FireplaceQu[is.na(train_test$FireplaceQu)] <- names(which.max(table(train_test$FireplaceQu)))
train_test$GarageType[is.na(train_test$GarageType)] <- names(which.max(table(train_test$GarageType)))
train_test$GarageYrBlt[is.na(train_test$GarageYrBlt)] <- names(which.max(table(train_test$GarageYrBlt)))
train_test$GarageCars[is.na(train_test$GarageCars)] <- names(which.max(table(train_test$GarageCars)))
train_test$SaleType[is.na(train_test$SaleType)] <- names(which.max(table(train_test$SaleType)))
#recode with mean value
train_test$LotFrontage[is.na(train_test$LotFrontage)] <- mean(train_test$LotFrontage, na.rm = TRUE)
train_test$MasVnrArea[is.na(train_test$MasVnrArea)] <- mean(train_test$MasVnrArea, na.rm = TRUE)
train_test$BsmtFinSF1[is.na(train_test$BsmtFinSF1)] <- mean(train_test$BsmtFinSF1, na.rm = TRUE)
train_test$TotalBsmtSF[is.na(train_test$TotalBsmtSF)] <- mean(train_test$TotalBsmtSF, na.rm = TRUE)
train_test$BsmtUnfSF[is.na(train_test$BsmtUnfSF)] <- mean(train_test$BsmtUnfSF, na.rm = TRUE)
train_test$GarageArea[is.na(train_test$GarageArea)] <- mean(train_test$GarageArea, na.rm = TRUE)
train_test$BsmtFinSF2[is.na(train_test$BsmtFinSF2)] <- mean(train_test$BsmtFinSF2, na.rm = TRUE)
#NA to "none"
train_test[, c(7,31,32,33,34,36,61,64,65,73,74,75)] <-  lapply(train_test[, c(7,31,32,33,34,36,61,64,65,73,74,75)], as.character)
train_test[, c(7,31,32,33,34,36,61,64,65,73,74,75)][is.na(train_test[, c(7,31,32,33,34,36,61,64,65,73,74,75)])] <- "None"
train_test[, c(7,31,32,33,34,36,61,64,65,73,74,75)] <-  lapply(train_test[, c(7,31,32,33,34,36,61,64,65,73,74,75)], as.factor)
#run the for loop again to check whether clearning is done
for (i in 1:81){
temp = as.data.frame(table(is.na(train_test[,i])))
missing_value[i,] <- temp[2,2]
missing_value[i,1] <- colnames(train_test[i])
}
missing_value <- filter(missing_value, missing_value$MissingValue != 'NA')
missing_value$colName
#split test_train into test AND train. cleaning is done here
train <- filter(train_test, train_test$SalePrice != 0)
test <- filter(train_test, train_test$SalePrice == 0)
#Parametric
train.lm <- lm(SalePrice ~ ., data =train)
##########################################KNN
#use only numeric cols
train_numeric <- select_if(train,is.numeric)
test_numeric <- select_if(test,is.numeric)
#By using Cor(), here we decide to what X variables will be added to KNN model.
cor(train_numeric)
test_numeric['SalePrice'] <- NULL
train_numeric['SalePrice'] <- NULL
# calculate the number of K
k <- floor(sqrt(nrow(train_numeric)))
#nomalize
normalize <- function(x) {
norm <- ((x - min(x))/(max(x) - min(x)))
return (norm)
}
train_numeric[,2:33] <- apply(train_numeric[,2:33],2,normalize)
test_numeric[,2:33] <- apply(test_numeric[,2:33],2,normalize)
train_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
test_numeric <- test_numeric[, c(5,17,24,13,14,18,22,7,8)]
#
# function to calculate euclidean distance(reference: https://rpubs.com/bskc/300711)
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
#
eist <- c()
distance <- c()
for (j in 1:1459) {
for (i in 1:1460) {
distance[i] <- euc.dist(train_numeric[i,],test_numeric[j,])
}
edist_temp <- data.frame(dist=distance, salePrice = train[,81])
edist_temp <- edist_temp[order(edist_temp$dist),]
edist_temp <- edist_temp[1:38,]
distance_mean <- mean(edist_temp$salePrice)
eist[j] <- distance_mean
}
#Final selection
train_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
test_numeric <- test_numeric[, c(5,17,24,13,14,18,22,7,8)]
# calculate the number of K
k <- floor(sqrt(nrow(train_numeric)))
# calculate the number of K
k <- floor(sqrt(nrow(train_numeric)))
#Final selection
train_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
test_numeric <- test_numeric[, c(5,17,24,13,14,18,22,7,8)]
# calculate the number of K
k <- floor(sqrt(nrow(train_numeric)))
k
train_numeric
floor(sqrt(nrow(train_numeric)))
#Final selection
train_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
test_numeric <- test_numeric[, c(5,17,24,13,14,18,22,7,8)]
#Final selection
train_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
View(test_numeric)
source('C:/Users/lukek/Desktop/Fall2018/SYS6018/HW/Competition2HousePrices/sys6018-competition-house-prices/HW_HousePrice.R', echo=TRUE)
eist
source('C:/Users/lukek/Desktop/Fall2018/SYS6018/HW/Competition2HousePrices/sys6018-competition-house-prices/HW_HousePrice.R', echo=TRUE)
#Final selection
train_numeric <- train_numeric[, c(5,17,24,13,14,18,22,7,8)]
source('C:/Users/lukek/Desktop/Fall2018/SYS6018/HW/Competition2HousePrices/sys6018-competition-house-prices/HW_HousePrice.R', echo=TRUE)
source('C:/Users/lukek/Desktop/Fall2018/SYS6018/HW/Competition2HousePrices/sys6018-competition-house-prices/HW_HousePrice.R', echo=TRUE)
